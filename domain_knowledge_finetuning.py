# -*- coding: utf-8 -*-
"""domain_knowledge_finetuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xNXDnBt17ATRmwwWoJt-poftgbIaqArm

## Installing libraries
"""

!pip install "transformers==4.35" "datasets==2.13.0" "peft==0.4.0" "accelerate==0.21.0" "bitsandbytes==0.40.2" "trl==0.4.7" "safetensors>=0.3.1" "tiktoken"

import pandas as pd
import torch
from datasets import Dataset, load_dataset
from random import randrange
from peft import LoraConfig, get_peft_model, AutoPeftModelForCausalLM
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig, TrainingArguments
from trl import SFTTrainer

"""# Load dataset from local"""

!ls -ltr *.csv

df = pd.read_csv("train.csv")

#convert to Huggingface Datasets format
train = Dataset.from_pandas(df)

train

"""# Load the dataset from Huggingface"""

# !huggingface-cli login

# from datasets import load_dataset, Dataset
# dataset = load_dataset("HuggingFaceH4/no_robots")

# dataset

"""# Fine-Tuning"""

model_id = "TheBloke/Llama-2-7B-Chat-fp16"

!huggingface-cli login

# Get the type
compute_dtype = getattr(torch, "float16")

# BitsAndBytesConfig int-4 config
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=False,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=compute_dtype
)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# # Load the tokenizer
# tokenizer = AutoTokenizer.from_pretrained(model_id, trust_remote_code=True)
# tokenizer.pad_token = tokenizer.eos_token
# tokenizer.padding_side = "right"

# Commented out IPython magic to ensure Python compatibility.
# %%time
# # Load the pretrained model
# model = AutoModelForCausalLM.from_pretrained(model_id,
#                                              quantization_config=bnb_config,
#                                              device_map="auto")

# LoRA config based on QLoRA paper
peft_config = LoraConfig(
        lora_alpha=16,
        lora_dropout=0.1,
        r=64,
        bias="none",
        task_type="CAUSAL_LM"
)

# Define the training arguments. For full list of arguments, check
#https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments
args = TrainingArguments(
    output_dir='llama2-7b',
    num_train_epochs=10, # adjust based on the data size
    per_device_train_batch_size=2, # use 4 if you have more GPU RAM
    save_strategy="epoch", #steps
    # evaluation_strategy="epoch",
    learning_rate=2e-4,
    fp16=True,
    seed=42
)

# Create the trainer
trainer = SFTTrainer(
    model=model,
    train_dataset=train,
    # eval_dataset=test,
    dataset_text_field='text',
    peft_config=peft_config,
    max_seq_length=1042,
    tokenizer=tokenizer,
    args=args,
    packing=True,
)

# train
trainer.train()

# save model in local
trainer.save_model()

"""# Merge the base model and adapters and save it

Clean the memory
"""

# Empty VRAM
del model
del trainer
import gc
gc.collect()
gc.collect()

torch.cuda.empty_cache()

gc.collect()

"""Reload the saved model and merge it then we can save the whole model"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# from peft import AutoPeftModelForCausalLM
# 
# new_model = AutoPeftModelForCausalLM.from_pretrained(
#     'llama2-7b',
#     low_cpu_mem_usage=True,
#     return_dict=True,
#     torch_dtype=torch.float16,
#     device_map="auto",
# )

# Merge LoRA and base model
merged_model = new_model.merge_and_unload()

# Save the merged model
merged_model.save_pretrained("metallama2-7b-tuned-merged", safe_serialization=True)
tokenizer.save_pretrained("metallama2-7b-tuned-merged")

"""# Test the model"""

prompt = "What is cybersecurity?"

input_ids = tokenizer(prompt, return_tensors="pt", truncation=True).input_ids.cuda()

outputs = merged_model.generate(input_ids=input_ids,
                         max_new_tokens=200,
                        #  do_sample=True,
                        #  top_p=0.9,
                         temperature=0.6)

result = tokenizer.batch_decode(outputs.detach().cpu().numpy(), skip_special_tokens=True)[0]

print(result)

import locale
locale.getpreferredencoding = lambda: "UTF-8"

!huggingface-cli login

!rm -r llama2-7b/

# Commented out IPython magic to ensure Python compatibility.
# # push merged model to the hub
# %%time
# hf_model_repo = "Cyber3ra/SecAI-Llama-2-1"
# merged_model.push_to_hub(hf_model_repo)
# tokenizer.push_to_hub(hf_model_repo)

"""# Load the model from the HF Hub and test it"""

!pip install bitsandbytes accelerate #restart kernel

import torch
from transformers import BitsAndBytesConfig

# Get the type
compute_dtype = getattr(torch, "float16")

# BitsAndBytesConfig int-4 config
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=False,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=compute_dtype
)

import torch
from transformers import AutoModelForCausalLM, AutoTokenizer

hf_model_repo = "Cyber3ra/SecAI-Llama-2-1"

# Get the tokenizer
tokenizer = AutoTokenizer.from_pretrained(hf_model_repo)

# Load the model
model = AutoModelForCausalLM.from_pretrained(hf_model_repo,
                                             quantization_config=bnb_config,
                                             device_map="auto")

prompt = "What is Cybersecurity?"

# Commented out IPython magic to ensure Python compatibility.
# # Generate response
# %%time
# input_ids = tokenizer(prompt, return_tensors="pt", truncation=True).input_ids
# outputs = model.generate(input_ids=input_ids,
#                          max_new_tokens=200,
#                          temperature=0.6)
# 
# result = tokenizer.batch_decode(outputs, skip_special_tokens=True)[0]
# 
# # Print the result
# print(f"Generated response:\n{result}")
#

"""# Use Transformers Pipeline for Inference"""

import transformers

tokenizer = AutoTokenizer.from_pretrained("genaitraining/llama-2-7b-domain-tuned",  trust_remote_code=True)
pipeline = transformers.pipeline(
    "text-generation",
    model="genaitraining/llama-2-7b-domain-tuned",
    trust_remote_code=True

)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# sequences = pipeline(
#     prompt,
#     temperature=0.6,
#     eos_token_id=tokenizer.eos_token_id,
#     max_length=200,
# )

for seq in sequences:
    print(seq['generated_text'])

